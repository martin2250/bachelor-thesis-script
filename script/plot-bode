#!/usr/bin/python3
import argparse

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import numpy as np
import scipy.signal

import lib.plotstyle
import lib.tekdecode

parser = argparse.ArgumentParser(
	description='generates bode plots from time-domain oscilloscope data')
parser.add_argument('chInput', metavar='file', type=str,
                    help='file that contains the amplifier input')
parser.add_argument('chOutput', metavar='file', type=str,
                    help='file that contains the amplifier output')
parser.add_argument('--output', type=str,
                    help='plot output file')

args = parser.parse_args()

voltage_in, sample_rate_in, length_in = lib.tekdecode.loadFile(args.chInput)
voltage_out, sample_rate_out, length_out = lib.tekdecode.loadFile(
	args.chOutput)

if sample_rate_in != sample_rate_out:
	print('files have different sample rates')
	exit(1)
sample_rate = sample_rate

if length_in != length_out:
	print('files have different lengths')
	exit(1)


def sine(t, amplitude, ang_frequency, phi, offset):
	return amplitude * np.sin(ang_frequency * t - phi) + offset


def fitsine(T, U, freq):
	maxU = np.max(np.abs(U))
	if maxU == 0:
		maxU = 0.01
	guess = [maxU, 2 * np.pi * freq, 0, 0]  # amplitude, frequency, phase, offset
	bounds = (
		[0, 2 * np.pi * freq * 0.8, 0, -2],
		[maxU * 1.1, 2 * np.pi * freq * 1.2, 2 * np.pi, 2])
	result = scipy.optimize.curve_fit(sine, T, U, guess, bounds=bounds)
	(amplitude, ang_frequency, phi, offset), pconv = result
	return amplitude, ang_frequency / (2 * np.pi), phi, offset


minf = 1000
maxf = 500000
