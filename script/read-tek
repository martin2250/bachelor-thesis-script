#!/usr/bin/python3
import argparse
import socket

# doc: https://www.tek.com/oscilloscope/dpo4054-manual/mso4000-and-dpo4000-series


################################################################################

parser = argparse.ArgumentParser(
    description='read waveform from tek oscilloscope via USB/GPIB')

parser.add_argument('ip',
                    help='scope IP address')
parser.add_argument('channels', nargs='+',
                    help='which channels to save')
parser.add_argument('output',
                    help='output file pattern (must contain %c placeholder which will be replaced with the channel, if count is used, %n will be replaced with number)')
parser.add_argument('--count', type=int,
                    help='number of waveforms to aquire')

################################################################################

args = parser.parse_args()


def read_waveform(filepattern, numbered=False):
	printquery(f'DATA:ENCDG RIBINARY')
	for channel in args.channels:
		printquery(f'DATA:SOURCE {channel}')

		if False:
			printquery(f'DATA:START 0')
			printquery(f'DATA:STOP {int(20e6)}')  # 20 megapoints or less

		filename = get_filename(filepattern, channel, numbered)

		with open(filename, 'w') as of:
			of.write(scope.query('CURVE?'))
			print(f'file {filename} length: {of.tell()}')


if args.command == 'read':
	read_waveform(args.output)

elif args.command == 'trigger':
	printquery('ACQUIRE:STOPAFTER SEQUENCE')
	for i in range(args.count):
		printquery('ACQUIRE:STATE RUN')
		printquery('TRIGGER')
		while printquery('ACQUIRE:STATE?') != ':ACQUIRE:STATE 0':
			time.sleep(1)
		read_waveform(args.output, True)
