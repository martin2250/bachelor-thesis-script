#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
import argparse
import code

import argcomplete


def calcA(index_start):
	noise = get_random_noise(index_start)
	# while np.max(np.abs(noise - np.mean(noise))) > 5 * np.std(noise):
	# 	noise = get_random_noise()
	signal = noise + pulse
	signal_fft = np.fft.fft(signal) / length
	v_n = signal_fft
	# calculate estimated A
	top = np.conj(s_n) * v_n / J_f_n

	a = np.sum(top) / sum_bottom * 1e6
	return a.real


# I'm sorry (a bit)
if __name__ == '__main__':

	parser = argparse.ArgumentParser(
		description='uses a noise track to generate sample pulse waveforms')

	parser.add_argument('noise_file',
	                    help='noise track to pull random data from')
	parser.add_argument('plot', choices=['stat', 'tracks', 'res'],
	                    help='show histogram or noise tracks')

	parser.add_argument('--size', metavar=['width', 'height'], type=float, nargs=2,
	                    help='plot size (mm)')
	parser.add_argument('--yrange', metavar=['y_min', 'y_max'], type=float, nargs=2,
	                    help='plot range Y')

	parser.add_argument('--length', type=float, default=0.01,
	                    help='length of a single track (seconds)')
	parser.add_argument('--pulse', type=float, default=9e-6,
	                    help='pulse height (volt)')
	parser.add_argument('--time-const', type=float, default=100,
	                    help='time constant of input side pulse decay (seconds)')

	parser.add_argument('--amp-fcl', type=float, default=5.9,
	                    help='amplifier high pass cutoff frequency')
	parser.add_argument('--amp-A', type=float, default=35,
	                    help='amplifier amplification factor')

	parser.add_argument('--seed', type=int, help='RNG seed, not implemented')

	parser.add_argument('--rows', type=int, default=3,
	                    help='number of rows to plot')
	parser.add_argument('--cols', type=int, default=3,
	                    help='number of columns to plot')

	parser.add_argument('--output',
	                    help='output file')

	argcomplete.autocomplete(parser)
	args = parser.parse_args()

	################################################################################
	# prevent autopep8 from moving this to the front (speeds up argcomplete and parser)
	if True:
		import numpy as np
		import matplotlib.pyplot as plt
		import matplotlib.ticker
		import matplotlib.offsetbox
		import lib.tekdecode
		import lib.fitgain
		import scipy.signal
		import random

	if args.seed:
		random.seed(args.seed)

	voltage_buffer_out, sample_rate, input_length = lib.tekdecode.loadFile(
		args.noise_file)

	# length = number of samples
	length = int(args.length * sample_rate / 2) * \
            2  # make length divisible by two
	pulse_start = int(length * 0.2)
	time = np.linspace(0, args.length, length)

	# factor out buffer amp
	# calculate noise at hemt output
	voltage_output = voltage_buffer_out / 20

	def get_random_noise_start():
		return random.randrange(0, input_length - length)

	def get_random_noise(index_start=None):
		if index_start is None:
			index_start = get_random_noise_start()
		noise = voltage_output[index_start:index_start + length]
		return noise - np.mean(noise)

	# create perfect pulse as seen on the hemt input
	pulse_unit_input = np.zeros(length)
	pulse_unit_input[pulse_start:] = np.exp(
		-time[:-pulse_start] / args.time_const)

	# calculate pulse shape at hemt output (with gain and high pass)

	def butter_highpass(cutoff, fs, order=5):
	    nyq = 0.5 * fs
	    normal_cutoff = cutoff / nyq
	    b, a = scipy.signal.butter(
	    	order, normal_cutoff, btype='high', analog=False)
	    return b, a

	def butter_highpass_filter(data, cutoff, fs, order=5):
	    b, a = butter_highpass(cutoff, fs, order=order)
	    y = scipy.signal.lfilter(b, a, data)
	    return y

	hemt_hp_order = 1
	# hemt_sos = scipy.signal.butter(hemt_hp_order, args.amp_fcl,
	#                                'hp', fs=sample_rate, output='sos')
	# pulse_unit_output = args.amp_A * \
	# 	scipy.signal.sosfilt(hemt_sos, pulse_unit_input)
	pulse_unit_output = args.amp_A * \
		butter_highpass_filter(pulse_unit_input, args.amp_fcl, sample_rate, 1)
	pulse = args.pulse * pulse_unit_output

	# plot the high-passed pulse
	if False:
		plt.plot(pulse_unit_input, label='input (unit pulse)')
		plt.plot(pulse_unit_output / args.amp_A,
		         label='output (unit pulse without voltage amplification)')
		plt.legend()
		plt.show()

	# get J_ss of noise track

	frequency_noise, power_noise = scipy.signal.welch(
		voltage_output, sample_rate, nperseg=length)

	frequency_noise_two, power_noise_two = scipy.signal.welch(
		voltage_output, sample_rate, nperseg=length, return_onesided=False)

	pulse_fft = np.fft.fft(
		pulse_unit_output) / length
	freq_ft = np.fft.fftfreq(length, 1 / sample_rate)

	# define variables as in the equation
	s_n = pulse_fft
	J_f_n = power_noise_two

	# get optimal filter
	optimal_filter_fft = np.conj(s_n) / J_f_n
	optimal_filter_fft = 2 * optimal_filter_fft / \
		np.max(np.abs(optimal_filter_fft))
	optimal_filter = np.fft.ifft(optimal_filter_fft)
	pulse_filt = scipy.signal.convolve(pulse, optimal_filter).real
	# [pulse_start:length + pulse_start][::-1]
	# [length - pulse_start:1 - pulse_start]
	pulse_filt = pulse_filt[pulse_start:length + pulse_start][::-1]

	def apply_fft_factor(signal, factor):
		signal_fft = np.fft.fft(signal)
		signal_fft *= factor
		return np.fft.ifft(signal_fft)

	# top and bottom defined as in http://lss.fnal.gov/archive/thesis/2000/fermilab-thesis-2000-59.pdf#page=441
	bottom = np.abs(s_n)**2 / J_f_n
	sum_bottom = np.sum(bottom)

	# def calcA(index_start):
	# 	noise = get_random_noise(index_start)
	# 	# while np.max(np.abs(noise - np.mean(noise))) > 5 * np.std(noise):
	# 	# 	noise = get_random_noise()
	# 	signal = noise + pulse
	# 	signal_fft = np.fft.fft(signal) / length
	# 	v_n = signal_fft
	# 	# calculate estimated A
	# 	top = np.conj(s_n) * v_n / J_f_n
	#
	# 	a = np.sum(top) / sum_bottom * 1e6
	# 	return a

	if args.plot == 'res':
		sigma_inv_sq = args.length * sum_bottom
		sigma = 1 / np.sqrt(np.sum(sigma_inv_sq))
		print(f'theoretical resolution: {sigma*1e6} uV')
		print(f'eqivalent to {sigma*6.5/args.pulse} keV')
		exit()
	elif args.plot == 'stat':
		import lib.pyplotrc
		fig, ax = plt.subplots(figsize=tuple(
		    (s / 25.4 for s in args.size)) if args.size else None, constrained_layout=True)

		# collect statistics
		centerindeces = [get_random_noise_start() for i in range(1000)]
		from multiprocessing import Pool
		pool = Pool(processes=4)
		A = pool.map(calcA, centerindeces)
		pool.close()
		pool.join()

		ax.hist(A, 50, density=True)

		annotation = """
	\\begin{alignat*}{1}
		\\langle \\hat{A} \\rangle &= \\SI{%0.2f}{\\micro\\volt} \\\\
		\\sigma_A &= \\SI{%0.2f}{\\micro\\volt}
	\\end{alignat*}
	""" % (np.mean(A), np.std(A))

		annotation = annotation.replace('\n', '')
		anchored_text = matplotlib.offsetbox.AnchoredText(annotation, loc=2)
		ax.add_artist(anchored_text)

		ax.set_yticklabels([])
		ax.set_xlabel('$\\hat{A}$ (\\si{\\micro\\volt})')

		if not args.output:
			print(f'{np.mean(A)} +- {np.std(A)} uV pulse height')

	elif args.plot == 'tracks':
		import lib.pyplotrc
		fig, axes = plt.subplots(
			nrows=args.rows,
			ncols=args.cols,
			sharex=True,
			sharey='row',
			figsize=tuple((s / 25.4 for s in args.size)) if args.size else None)
		if args.size:
			plt.subplots_adjust(
				left=(20 / args.size[0]),
				right=1 - (20 / args.size[0]),
				top=1 - (7 / args.size[1]),
				bottom=(11 / args.size[1]))

		# for ax in axes.flatten():
		for index in map(tuple, np.indices((args.rows, args.cols)).reshape((2, -1)).T):
			ax = axes[index]

			if args.yrange:
				ax.set_ylim(*args.yrange)
			ax.grid(which='both', alpha=0.4)

			if index == (int(args.rows / 2), 0):
				ax.set_ylabel('$U_\\mathrm{aus}$ (mV)')
			if index == (args.rows - 1, 1):
				ax.set_xlabel('$t$ (ms)')

			if index[0] == 0:
				pulse_max = np.max(pulse_filt)
				ax.set_ylim(-pulse_max * 1.1e3, pulse_max * 1.1e3)
				titlefs = 10
				if index[1] == 0:
					ax.plot(time * 1e3, pulse * 1e3, 'C0')
					ax.set_title('Puls ungefiltert', fontsize=titlefs)
					continue
				if index[1] == 1:
					ax.plot(time * 1e3, pulse_filt * 1e3, 'C1')
					ax.set_title('Puls gefiltert', fontsize=titlefs)
					continue
				if index[1] == 2:
					of_factor = pulse_max / np.max(np.abs(optimal_filter.real))
					ax.plot(time * 1e3, 1e3 * of_factor * optimal_filter[::-1].real, 'r')
					ax.set_title('optimaler Filter', fontsize=titlefs)
					ax.set_ylabel('(A.U.)')
					continue

			noise = get_random_noise()
			while np.max(np.abs(noise - np.mean(noise))) > 5 * np.std(noise):
				noise = get_random_noise()
			signal = noise + pulse

			ax.plot(time * 1e3, signal * 1e3, lw=0.5)

			signal_filt = scipy.signal.convolve(signal, optimal_filter).real
			signal_filt = signal_filt[length - pulse_start:1 - pulse_start]
			ax.plot(time * 1e3, signal_filt * 1e3, lw=1)

	if args.output:
		plt.savefig(args.output)
	else:
		plt.show()
