#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
import argparse

import argcomplete

################################################################################

parser = argparse.ArgumentParser(
	description='generates power density plots from time-domain oscilloscope data, create multiple traces by separating multiple "trace" argument groups with dashes "-"')


parser_group_common = parser.add_argument_group('common')

parser_group_common.add_argument('--resolution', type=int,
                                 help='fft resolution', default=100000)
parser_group_common.add_argument('--title',
                                 help='plot title')
parser_group_common.add_argument('--size', metavar=['width', 'height'], type=float, nargs=2,
                                 help='plot size (mm)')
parser_group_common.add_argument('--xrange', metavar=['x_min', 'x_max'], type=float, nargs=2,
                                 help='plot range X')
parser_group_common.add_argument('--yrange', metavar=['y_min', 'y_max'], type=float, nargs=2,
                                 help='plot range Y')
parser_group_common.add_argument('--reference', default='out',
                                 help='input or output referenced')
parser_group_common.add_argument('--output',
                                 help='output file')
parser_group_common.add_argument('--no-cache', action='store_true',
                                 help='disable fft caching')
parser_group_common.add_argument('--alpha', type=float, default=1,
                                 help='trace opacity (0-1)')
parser_group_common.add_argument('--linewidth', type=float,
                                 help='line width')
parser_group_common.add_argument('--margin-side', type=float, default=15,
                                 help='left and right plot margin (mm)')
parser_group_common.add_argument('--margin-bottom', type=float, default=11,
                                 help='bottom plot margin (mm)')
parser_group_common.add_argument('--use-constrained-layout', dest='use_constrained_layout', action='store_true', default=False,
                                 help='legacy for compare-max plot')

parser_group_trace = parser.add_argument_group('trace')

parser_group_trace.add_argument('files', nargs='+', metavar='file',
                                help='noise input files, will be averaged together to form a single trace')

parser_group_trace.add_argument('--label',
                                help='trace label')
parser_group_common.add_argument('--color',
                                 help='trace color')

parser_group_trace.add_argument('--calculate-resolution', type=float, metavar='pulse_height',
                                help='calculate resolution from optimal filtering, pulse_height = voltage of incoming step pulse')

parser_group_trace.add_argument('--gain-factor-const',
                                help='constant amplification of buffer amplifier (evaluated as expression, noise will be divided by this factor)')
parser_group_trace.add_argument('--gain-factor-simple', type=float, nargs=2, metavar=['cutoff_L', 'cutoff_H'],
                                help='divide by first order bandpass with supplied cutoff frequencies')
parser_group_trace.add_argument('--gain-factor-fit', action='append',
                                help='supply one or more (frequency - gain) files to get input referenced plot, noise will be divided by this')
parser_group_trace.add_argument('--gain-fit-function', choices=['hybrid', 'simple'], default='hybrid',
                                help='fit function used for gain')

argcomplete.autocomplete(parser)

################################################################################
# split arguments into groups separated by dashes '-', treat first group as both general args and first trace
if True:
	import sys

args_raw = sys.argv[1:]
args_split = []

while '-' in args_raw:
	index_split = args_raw.index('-')
	args_split.append(args_raw[0:index_split])
	args_raw = args_raw[index_split + 1:]
if args_raw:
	args_split.append(args_raw)

args = parser.parse_args(args_split[0])

traces = [parser.parse_args(args_trace_raw)
          for args_trace_raw in args_split]

################################################################################
# prevent autopep8 from moving this to the front (speeds up argcomplete and parser)
if True:
	import os
	from dataclasses import dataclass
	from multiprocessing import Pool

	import matplotlib.pyplot as plt
	import matplotlib.ticker
	import numpy as np
	import scipy.signal

	import lib.fitgain
	import lib.tekdecode
	import lib.pyplotrc

################################################################################
# calculate noise density from a single file


def process_file(file):
	if file.endswith('.fft.npz'):
		data = np.load(file)
		power = data['power']
		sample_rate = data['sample_rate']
		frequency = np.linspace(0, sample_rate / 2, power.size)
		return power[1:], frequency[1:], sample_rate

	file_cache = file + f'.{args.resolution}.fft.npz'

	if not args.no_cache and os.path.isfile(file_cache):
		try:
			data = np.load(file_cache)
			power = data['power']
			sample_rate = data['sample_rate']
			frequency = np.linspace(0, sample_rate / 2, power.size)
			return power[1:], frequency[1:], sample_rate
		except Exception as e:
			print(f'failed to load cached fft for {file}\n{e}')

	if file.startswith('step'):
		args.no_cache = True  # runs in subprocess anyways, so other files are not affected
		_, step_height, step_sample_rate, step_time_rise = file.split(':')
		sample_rate = int(step_sample_rate)
		if step_time_rise == '0':
			length_half = int(args.resolution / 2)
			voltage = np.concatenate(
				(np.zeros(length_half), float(step_height) * np.ones(length_half)))
		else:
			time = np.arange(args.resolution) / sample_rate
			time_half = args.resolution / (2 * sample_rate)
			voltage = float(step_height) / \
	                    (1 + np.exp((time - time_half) / float(step_time_rise)))
	elif file.startswith('slope'):
		args.no_cache = True
		_, slope_height, slope_sample_rate = file.split(':')
		sample_rate = int(slope_sample_rate)
		voltage = np.linspace(0, float(slope_height), args.resolution)
	else:
		voltage, sample_rate, length = lib.tekdecode.loadFile(file)

	frequency, power = scipy.signal.welch(
		voltage, sample_rate, nperseg=args.resolution)

	if not args.no_cache:
		np.savez_compressed(file_cache, power=power, sample_rate=sample_rate)

	return power[1:], frequency[1:], sample_rate

################################################################################


def main():
	# create a flat list of all files from all traces, add a list of file indices to each trace
	files = []

	for trace in traces:
		trace.file_mapping = np.arange(
			len(files), len(files) + len(trace.files))
		files += trace.files

	############################################################################
	# process all files
	pool = Pool()
	output = pool.map(process_file, files)
	pool.close()
	pool.join()

	power, frequency, sample_rate = zip(*output)
	frequency = frequency[0]
	power = np.array(power)

	############################################################################
	# check that sample rates match
	if sample_rate.count(sample_rate[0]) != len(sample_rate):
		print('files have different saple rates!')
		exit(1)

	############################################################################
	# plot everything

	fig, ax = plt.subplots(constrained_layout=args.use_constrained_layout, figsize=tuple(
		(s / 25.4 for s in args.size)) if args.size else None)

	if args.size and not args.use_constrained_layout:
		plt.subplots_adjust(
			left=(args.margin_side / args.size[0]),
			right=1 - (args.margin_side / args.size[0]),
			top=1 - (2 / args.size[1]),
			bottom=(args.margin_bottom / args.size[1]))

	use_legend = False

	############################################################################

	if args.calculate_resolution:
		step_voltage = args.calculate_resolution
		signal_wrt_frequency = step_voltage / 2 / np.pi / frequency

		ax.plot(frequency, signal_wrt_frequency * 1e6, '--k',
		        label=f'\\SI{{{step_voltage * 1e6}}}{{\\micro\\volt}} event', alpha=args.alpha)

	############################################################################

	for trace in traces:
		power_mean = np.mean(power[trace.file_mapping], axis=0)
		voltage = np.sqrt(power_mean)

		if trace.gain_factor_const:
			voltage /= eval(trace.gain_factor_const)

		if trace.gain_factor_simple:
			gain = lib.fitgain.bandpass(frequency, 1, *trace.gain_factor_simple)
			voltage /= gain

		for gain_file in trace.gain_factor_fit or []:
			(frequency_fit, gain_fit) = np.loadtxt(
				gain_file, unpack=True, usecols=(0, 1))
			gain_fitfunc = lib.fitgain.fit_lookup[trace.gain_fit_function](
				frequency_fit, gain_fit)
			voltage /= gain_fitfunc(frequency)
		label = trace.label if trace.label is not None else ',\n'.join(trace.files)
		if label:
			use_legend = True
		else:
			label = None
		ax.plot(frequency, voltage * 1e6, label=label,
		        alpha=args.alpha, lw=args.linewidth, color=trace.color)

		if args.calculate_resolution:
			# see page 21 of ME
			sum_3_33 = np.sum(signal_wrt_frequency**2 / (voltage**2 / 2))
			sigma_voltage_squared = args.resolution / (sample_rate[0] * 2 * sum_3_33)
			sigma_voltage = np.sqrt(sigma_voltage_squared) * step_voltage
			if not args.output:
				print(
					f'resolution ({trace.label}): {sigma_voltage:0.2e} V (for {step_voltage:0.2e} V signal)')

	############################################################################

	ax.set_xscale("log", nonposx='clip')
	ax.set_yscale("log", nonposy='clip')
	ax.grid(which='both', alpha=0.4)
	for subax in [ax.xaxis, ax.yaxis]:
		subax.set_major_formatter(matplotlib.ticker.FormatStrFormatter('%g'))
	ax.set_ylabel(
		r'$\sqrt{J_{ss}^{%s}(f)}$ ($\si{\micro\volt/\sqrt{\hertz}}$)' % args.reference)
	ax.set_xlabel('$f$ (Hz)')
	if use_legend:
		ax.legend()
	if args.title:
		ax.set_title(args.title)
	if args.xrange:
		plt.xlim(*args.xrange)
	if args.yrange:
		plt.ylim(*args.yrange)

	############################################################################

	if args.output:
		plt.savefig(args.output)
	else:
		plt.show()

################################################################################


if __name__ == "__main__":
	main()
