#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
import argparse

import argcomplete

################################################################################

parser = argparse.ArgumentParser(
	description='generates bode plots from time-domain oscilloscope data')

parser.add_argument('input', help='input file, tab separated')

parser.add_argument('--gain', choices=['ratio', 'dB'], default='ratio',
                    help='how to plot gain')
parser.add_argument('--phase', choices=['rad', 'deg'],
                    help='how to plot phase')
parser.add_argument('--title',
                    help='plot title')

parser.add_argument('--gain-factor-const',
                    help='constant amplification of buffer amplifier (evaluated as expression, gain will be divided by this factor)')
parser.add_argument('--gain-factor-fit', action='append',
                    help='supply one or more (frequency - gain) files to get input referenced plot, gain will be divided by this')

parser.add_argument('--frequency-range', type=float, nargs=2,
                    help='min and max frequency for plot')

parser.add_argument('--output',
                    help='plot output file')

parser.add_argument('--fit-gain', action='store_true',
                    help='try to fit a band pass curve to gain')
parser.add_argument('--fit-output', action='store_true', default=False,
                    help='print result of fit')

################################################################################

argcomplete.autocomplete(parser)
args = parser.parse_args()

# prevent autopep8 from moving these imports to the front
if True:
	import numpy as np
	import matplotlib.pyplot as plt
	import lib.fitgain
	import matplotlib.ticker

################################################################################

(frequency, gain, phase) = np.loadtxt(args.input, unpack=True)

if args.gain_factor_const:
	gain /= eval(args.gain_factor_const)

for gain_file in args.gain_factor_fit or []:
	(frequency_fit, gain_fit) = np.loadtxt(
		gain_file, unpack=True, usecols=(0, 1))
	gain_fitfunc = lib.fitgain.fit_hybrid(frequency_fit, gain_fit)
	gain /= gain_fitfunc(frequency)

################################################################################

if args.fit_gain:
	gain_fitfunc = lib.fitgain.fit_hybrid(frequency, gain, args.fit_output)

	if args.frequency_range:
		f_log_min = np.log10(args.frequency_range[0])
		f_log_max = np.log10(args.frequency_range[1])
	else:
		f_log_min = np.log10(np.min(frequency))
		f_log_max = np.log10(np.max(frequency))

	frequency_fit = np.logspace(f_log_min, f_log_max, 100)

	gain_fit = gain_fitfunc(frequency_fit)

################################################################################

lines = []
axis_gain = plt.gca()
axis_gain.grid(which='both')
axis_gain.set_xscale("log", nonposx='clip')
axis_gain.set_xlabel('frequency (Hz)')

if args.frequency_range:
	axis_gain.set_xlim(*args.frequency_range)

if args.gain == 'dB':
	axis_gain.set_ylabel('gain (dB)')
	lines += axis_gain.plot(frequency, 20 * np.log10(gain),
                         '+', label='gain', color='C0')

	if args.fit_gain:
		lines += axis_gain.plot(frequency_fit, 20 * np.log10(gain_fit),
                          '-', label='fit', color='red')

elif args.gain == 'ratio':
	axis_gain.set_ylabel('gain')
	axis_gain.set_yscale("log", nonposy='clip')
	lines += axis_gain.plot(frequency, gain, '+', label='gain', color='C0')

	if args.fit_gain:
		lines += axis_gain.plot(frequency_fit, gain_fit,
                          '-', label='fit', color='red')

################################################################################

if args.phase:
	axis_phase = axis_gain.twinx()
	axis_phase.set_ylabel('phase')

	if args.phase == 'rad':
		axis_phase.set_ylim(-np.pi, np.pi)
		lines.append(axis_phase.plot(
			frequency, phase, '+', label='phase', color='C1'))

	elif args.phase == 'deg':
		axis_phase.set_ylim(-180, 180)
		axis_phase.set_yticks(np.arange(-180, 181, 45, ))
		lines.append(axis_phase.plot(
			frequency, phase * 180 / pi, '+', label='phase', color='C1'))

################################################################################

labels = [l.get_label() for l in lines]
axis_gain.legend(lines, labels, loc=0)

axis_gain.yaxis.set_major_formatter(
    matplotlib.ticker.FormatStrFormatter('%0.1f'))
axis_gain.yaxis.set_minor_formatter(
    matplotlib.ticker.FormatStrFormatter('%0.1f'))


if args.title:
	plt.title(args.title)
else:
	plt.title(args.input)

################################################################################

if args.output:
	plt.savefig(args.output)
else:
	plt.show()
