#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
import argparse

import argcomplete

parser = argparse.ArgumentParser(
	description='generates bode plots from time-domain oscilloscope data')

parser.add_argument('input', help='input file, tab separated')

parser.add_argument('--gain-axis', choices=['ratio', 'dB'], default='ratio',
                    help='how to plot gain')
parser.add_argument('--phase-axis', choices=['rad', 'deg'], default='deg',
                    help='how to plot phase')
parser.add_argument('--title',
                    help='plot title')

parser.add_argument('--output',
                    help='plot output file')

parser.add_argument('--fit-gain', action='store_true',
                    help='try to fit a low pass curve to gain')

################################################################################

argcomplete.autocomplete(parser)
args = parser.parse_args()

# prevent autopep8 from moving these imports to the front
if True:
	import numpy as np
	import matplotlib.pyplot as plt
	import scipy.optimize

################################################################################

(Frequency, Gain, Phase) = np.loadtxt(args.input, unpack=True)

################################################################################

if args.fit_gain:
	def lowpass(f, gain, cutoff, order):
		return gain / np.power(np.abs(1 + 1j * f / cutoff), order)

	(gain, cutoff, order), _ = scipy.optimize.curve_fit(lowpass, Frequency,
	                                                    Gain, (10, 10000, 1), bounds=([0, 100, 0.5], [100, 1e6, 1000]))

	Frequency_fit = np.linspace(np.min(Frequency), np.max(Frequency), 100)
	Gain_fit = lowpass(Frequency_fit, gain, cutoff, order)
	print(f'gain: {gain:0.2f}  ({20*np.log10(gain):0.1f} dB)')
	print(f'cutoff: {cutoff:0.1f} Hz')
	print(f'order: {order:0.2f}')

################################################################################

axis_gain = plt.gca()
axis_gain.grid(which='both')
axis_gain.set_xscale("log", nonposx='clip')
axis_gain.set_xlabel('frequency (Hz)')

if args.gain_axis == 'dB':
	axis_gain.set_ylabel('gain (dB)')
	Gain_plot = 20 * np.log10(Gain)
	if args.fit_gain:
		Gain_fit_plot = 20 * np.log10(Gain_fit)
	axis_gain.plot([np.min(Frequency), np.max(Frequency)], [-3, -3], color='red')

elif args.gain_axis == 'ratio':
	axis_gain.set_ylabel('gain')
	axis_gain.set_yscale("log", nonposy='clip')
	Gain_plot = Gain
	if args.fit_gain:
		Gain_fit_plot = Gain_fit

line_gain = axis_gain.plot(Frequency, Gain_plot, '+', label='gain', color='C1')
if args.fit_gain:
	line_gain_fit = axis_gain.plot(
		Frequency_fit, Gain_fit_plot, '-', label='gain fit', color='C0')

################################################################################

axis_phase = axis_gain.twinx()
axis_phase.set_ylabel('phase')

if args.phase_axis == 'rad':
	axis_phase.set_ylim(-np.pi, np.pi)
	Phase_plot = Phase

elif args.phase_axis == 'deg':
	axis_phase.set_ylim(-180, 180)
	axis_phase.set_yticks(np.arange(-180, 181, 45, ))
	Phase_plot = Phase * 180 / np.pi

line_phase = axis_phase.plot(
	Frequency, Phase_plot, '+', label='phase', color='C2')

################################################################################

lns = line_gain + line_phase
labs = [l.get_label() for l in lns]
axis_gain.legend(lns, labs, loc=0)

if args.title:
	plt.title(args.title)
else:
	plt.title(args.input)

################################################################################

if args.output:
	plt.savefig(args.output)
else:
	plt.show()
